In the Octave community, the @code{@@example} block is commonly used
non-semantically.  While we do not endorse this, we do like dem ascii arts:
@example
       _            _            _      __ _            _
    __| | ___   ___| |_ ___  ___| |_   / _| |___      _| |
   / _` |/ _ \ / __| __/ _ \/ __| __| | |_| __\ \ /\ / / |
  | (_| | (_) | (__| ||  __/\__ \ |_  |  _| |_ \ V  V /|_|
   \__,_|\___/ \___|\__\___||___/\__| |_|  \__| \_/\_/ (_)

@end example


(for later use)
@example
a = 4
  @result{} a = 4
@end example


Unfortunately, as there is no @strong{specified} output, this block
is skipped too:
@example
a = 5;
assert(false)
@end example

It really was skipped:
@example
a
  @result{} a = 4
@end example


``But wait'' you say, ``I want to test a block with no output!''
First, please patch Octave to use something like @code{@@verbatim}
for diagrams, etc.  Then patch doctest to remove this ``feature''.

Done all that?  No?  Fine, well because we like you, there is
a secret directive for you.  It could disappear without notice
in any future versions (we don't like you @strong{that} much).
Try these:
@example
@comment doctest: -TEXINFO_SKIP_BLOCKS_WO_OUTPUT
a = 5;
@end example

@example
@comment doctest: +XFAIL
@comment doctest: -TEXINFO_SKIP_BLOCKS_WO_OUTPUT
b = 6;
disp('do not skip me bro')
@end example
(note this test fails because it @strong{does} produce output).

And indeed they were not skipped:
@example
a
  @result{} a = 5
b
  @result{} b = 6
@end example
